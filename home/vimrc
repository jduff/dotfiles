" BASIC
set nocompatible " No vi compatility, this first because it resets some options
set mouse=a
if !has('nvim')
  set cb=autoselect
endif
let mapleader="," " Mapleader
filetype off
set encoding=utf-8
set history=1000  " Keep more history, default is 20

" Install vim-plug if it's missing
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

 Plug 'altercation/vim-colors-solarized'

 Plug 'scrooloose/nerdtree'
 Plug 'jremmen/vim-ripgrep'
 Plug 'junegunn/fzf', { 'build': './install', 'merged': 0 }
 Plug 'junegunn/fzf.vim'

 Plug 'tpope/vim-endwise'
 Plug 'tpope/vim-fugitive'
 Plug 'tpope/vim-unimpaired'
 Plug 'tpope/vim-commentary'
 Plug 'alvan/vim-closetag'
 Plug 'tpope/vim-ragtag'

 Plug 'luochen1990/rainbow'

 " Languages
 Plug 'gabrielelana/vim-markdown'
 Plug 'tpope/vim-rails'
 Plug 'vim-ruby/vim-ruby'
 Plug 'pangloss/vim-javascript'
 Plug 'leafgarland/typescript-vim'
 Plug 'MaxMEllon/vim-jsx-pretty'
 Plug 'peitalin/vim-jsx-typescript'
 Plug 'fatih/vim-go'
 Plug 'nvie/vim-flake8'
 Plug 'davidhalter/jedi-vim'
 Plug 'w0rp/ale'

 if !has('nvim')
   Plug 'roxma/nvim-yarp'
   Plug 'roxma/vim-hug-neovim-rpc'
 endif

call plug#end()

filetype plugin indent on

let g:rainbow_active = 1 "set to 0 if you want to enable it later via :RainbowToggle

" Allow editing crontabs http://vim.wikia.com/wiki/Editing_crontab
set backupskip=/tmp/*,/private/tmp/* "
set undodir=~/.vim/undo
set noswapfile
set nobackup

let python_highlight_all=1
syntax enable
set background=dark " Set dark solarized theme
colorscheme solarized
set t_Co=256  " 2000s plz
set scrolloff=5   " Keep some distance to the bottom"
set showmatch     " Show matching of: () [] {}
set ignorecase    " Required for smartcase to work
set smartcase     " Case sensitive when uppercase is present
set incsearch     " Search as you type
set smartindent   " Be smart about indentation
set expandtab     " Tabs are spaces
set smarttab
set shell=$SHELL  " load shell for ruby version etc.
set ruler

set tabstop=2 " Tabs are 2 spaces
set backspace=2 " Backspace deletes 2 spaces
set shiftwidth=2 " Even if there are tabs, preview as 2 spaces

set number
set clipboard=unnamed

set list " Highlight trailings, stolen from @teoljungberg
set listchars=tab:>-,trail:.,extends:>,precedes:<

set tags=tags,.git/tags " Use commit hook tags, see ~/.git_template

set backspace=indent,eol,start

" Fuzzy finder
let g:fzf_buffers_jump = 1
map <C-f> <plug>(fzf-complete-line)
map <leader>t :Files<CR>
map <leader>g :Tags<CR>

" NERDTree
map ` :NERDTreeToggle<cr>
map <leader>l :NERDTreeFind<CR>
let NERDTreeIgnore = ['\.pyc$']

" Ale
let g:ale_cache_executable_check_failures = 1
let g:ale_sign_column_always= 1
let g:ale_lint_delay = 200
let g:ale_ruby_rubocop_executable = 'bundle'
let g:ale_fixers = { 'javascript': ['eslint'], 'ruby': ['rubocop'] }
nmap <leader>d <Plug>(ale_fix)

" Git
map <leader>gs :Gstatus<CR>
map <leader>gc :Gcommit<CR>
map <leader>gb :Gblame<CR>
map <leader>gd :Gdiff<CR>
map <leader>gs :Gstatus<CR>

au BufNewFile,BufRead *.ejson set filetype=json

au FileType python setlocal tabstop=4 softtabstop=4 shiftwidth=4 autoindent fileformat=unix

autocmd BufNewFile,BufRead *.md,*.markdown set spell

autocmd FileType go,gitcommit,qf,gitset setlocal nolist " Go fmt will use tabs

set wildignore+=.git/**,public/assets/**,vendor/**,log/**,tmp/**,Cellar/**,app/assets/images/**,_site/**,home/.vim/bundle/**,**/.gitkeep,**/.DS_Store,**/*.netrw*,node_modules/*

" Search
command! -nargs=+ Search silent execute 'Rg <args>' | redraw! | cw
nnoremap <leader>f :Search<space>

map <C-f> <PageDown>

" closetag config
let g:closetag_filenames = '*.html,*.html.erb,*.xhtml,*.phtml'

" macros
nmap \p :set paste!<CR>:set paste?<CR>
nmap \s :setlocal invspell<CR>

if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"

  "autocmd VimLeave * :!echo -ne "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"

  if &term =~ "xterm\\|rxvt"
    " Changes the cursor between a Block and Line when in Insert mode or not.
    " These escape codes only work in iTerm2
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    autocmd VimLeave * :!echo -ne "\<Esc>]50;CursorShape=0\x7"
  endif
endif
