" BASIC
set nocompatible " No vi compatility, this first because it resets some options
set mouse=a
if !has('nvim')
  set cb=autoselect
endif
let mapleader="," " Mapleader
filetype off
set encoding=utf-8
set history=1000  " Keep more history, default is 20

set runtimepath^=~/.vim/bundle/repos/github.com/Shougo/dein.vim

call dein#begin('~/.vim/bundle')

call dein#add('Shougo/dein.vim')
call dein#add('scrooloose/nerdtree')
call dein#add('altercation/vim-colors-solarized')
call dein#add('jremmen/vim-ripgrep')
call dein#add('/usr/local/opt/fzf')
call dein#add('junegunn/fzf.vim')

call dein#add('tpope/vim-endwise')
call dein#add('tpope/vim-fugitive')
call dein#add('tpope/vim-unimpaired')
call dein#add('tpope/vim-commentary')
call dein#add('alvan/vim-closetag')
call dein#add('tpope/vim-ragtag')

" Languages
call dein#add('gabrielelana/vim-markdown')
call dein#add('tpope/vim-rails')
call dein#add('vim-ruby/vim-ruby')
call dein#add('pangloss/vim-javascript')
call dein#add('fatih/vim-go')
call dein#add('nvie/vim-flake8')
call dein#add('davidhalter/jedi-vim')
call dein#add('w0rp/ale')
call dein#add('Shougo/deoplete.nvim')
if !has('nvim')
  call dein#add('roxma/nvim-yarp')
  call dein#add('roxma/vim-hug-neovim-rpc')
endif
call dein#add('steelsojka/deoplete-flow')

if dein#check_install()
  call dein#install()
  let pluginsExist=1
endif

call dein#end()

filetype plugin indent on

" deplete config
call deoplete#custom#option({
      \ 'auto_complete': v:false,
      \ 'max_list': 20
      \ })

" Some completion on tab
inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ deoplete#mappings#manual_complete()
function! s:check_back_space() abort "{{{
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

let g:deoplete#sources#flow#flow_bin = 'flow'
let g:deoplete#enable_at_startup = 0
autocmd InsertEnter * call deoplete#enable()

" Allow editing crontabs http://vim.wikia.com/wiki/Editing_crontab
set backupskip=/tmp/*,/private/tmp/* "
set undodir=~/.vim/undo
set noswapfile
set nobackup

let python_highlight_all=1
syntax enable
set background=dark " Set dark solarized theme
colorscheme solarized
set t_Co=256  " 2000s plz
set scrolloff=5   " Keep some distance to the bottom"
set showmatch     " Show matching of: () [] {}
set ignorecase    " Required for smartcase to work
set smartcase     " Case sensitive when uppercase is present
set incsearch     " Search as you type
set smartindent   " Be smart about indentation
set expandtab     " Tabs are spaces
set smarttab
set shell=$SHELL\ -l  " load shell for ruby version etc.
set shell=bash\ --login
set ruler

set tabstop=2 " Tabs are 2 spaces
set backspace=2 " Backspace deletes 2 spaces
set shiftwidth=2 " Even if there are tabs, preview as 2 spaces

set number
set clipboard=unnamed

set list " Highlight trailings, stolen from @teoljungberg
set listchars=tab:>-,trail:.,extends:>,precedes:<

set tags=tags,.git/tags " Use commit hook tags, see ~/.git_template

set backspace=indent,eol,start

" Fuzzy finder
let g:fzf_buffers_jump = 1
map <C-f> <plug>(fzf-complete-line)
map <leader>t :Files<CR>
map <leader>g :Tags<CR>

" NERDTree
map ` :NERDTreeToggle<cr>
map <leader>l :NERDTreeFind<CR>
let NERDTreeIgnore = ['\.pyc$']

" Ale
let g:ale_cache_executable_check_failures = 1
let g:ale_sign_column_always= 1
let g:ale_lint_delay = 500
let g:ale_fixers = { 'javascript': ['eslint'] }
nmap <leader>d <Plug>(ale_fix)

" Git
map <leader>gs :Gstatus<CR>
map <leader>gc :Gcommit<CR>
map <leader>gb :Gblame<CR>
map <leader>gd :Gdiff<CR>
map <leader>gs :Gstatus<CR>

au BufNewFile,BufRead *.ejson set filetype=json

au FileType python setlocal tabstop=4 softtabstop=4 shiftwidth=4 autoindent fileformat=unix

autocmd BufNewFile,BufRead *.md,*.markdown set spell

autocmd FileType go,gitcommit,qf,gitset setlocal nolist " Go fmt will use tabs

set wildignore+=.git/**,public/assets/**,vendor/**,log/**,tmp/**,Cellar/**,app/assets/images/**,_site/**,home/.vim/bundle/**,**/.gitkeep,**/.DS_Store,**/*.netrw*,node_modules/*

autocmd Syntax c,cpp,vim,xml,html,xhtml setlocal foldmethod=syntax
autocmd Syntax c,cpp,vim,xml,html,xhtml normal zR

" Search
command! -nargs=+ Search silent execute 'Rg <args>' | redraw! | cw
nnoremap <leader>f :Search<space>

map <C-f> <PageDown>

" closetag config
let g:closetag_filenames = '*.html,*.html.erb,*.xhtml,*.phtml'

" macros
nmap \p :set paste!<CR>:set paste?<CR>
nmap \s :setlocal invspell<CR>

if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"

  "autocmd VimLeave * :!echo -ne "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"

  if &term =~ "xterm\\|rxvt"
    " Changes the cursor between a Block and Line when in Insert mode or not.
    " These escape codes only work in iTerm2
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    autocmd VimLeave * :!echo -ne "\<Esc>]50;CursorShape=0\x7"
  endif
endif
